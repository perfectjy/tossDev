@charset "utf-8";

//=======================================================
// Util.mixins
//=======================================================


//------------------------------------
// shadow
//------------------------------------
@mixin shadow($type){
	@if $type =='lg'{ // 0 ~ 1280
		$penumbra-opacity: 0.14 !default;
		$ambient-opacity: 0.12 !default;
		$umbra-opacity: 0.2 !default;
		box-shadow: 0 16px 38px -12px rgba(0, 0, 0, $penumbra-opacity * 4),
		0  4px 25px 0px rgba(0, 0, 0, $ambient-opacity),
		0  8px 10px -5px rgba(0, 0, 0, $umbra-opacity);
	}
	@else if $type =='md'{
		box-shadow: 0px 3px 6px 0px rgba(0, 0, 0, .2),
		0 1px 10px -5px rgba(#000, 0.08);
	}
	@else if $type =='sm'{
		box-shadow: 0 1px 10px 0px rgba(0, 0, 0, .04),
		0 1px 10px -5px rgba(#000, 0.02);
	}
	@else if $type =='none'{
		box-shadow: none;
	}
	@content;
}


//------------------------------------
// transition
//------------------------------------
@mixin transitions($prop, $time, $type){
	transition: $prop $time $type;
}


@mixin common-transition($obj : all, $time : 0s){
	$transition : cubic-bezier(0.685, 0.0473, 0.346, 1);
	transition:$obj .33s $transition $time;
}

@mixin rotate($value) {
	transform: rotate($value);
}

//svgString 색상변경
//@ svg 
//@ background positionX
//@ background positionY
//@ svg rotate
//@ new_color
// @ find_color
@mixin background($svg, $posx:center, $posy:center, $rotate:0, $new_color:#222, $find_color :'%23xxx'){
	$svg : str_replace(str_replace($svg, $find_color,  $new_color), '#', '%23');
	transform : rotate(#{$rotate}deg);
	background:url($svg) no-repeat $posx $posy; 
}

@mixin svg_color($svg, $new_color:#222, $find_color :'%23xxx'){
	$svg : svg_color($svg, $new_color, $find_color);
	background-image:url($svg); 
	// background:url($svg) no-repeat 0 0;
}

//SVG icon Align Center
@mixin bg_center {
	content:'';position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);
}

//------------------------------------
// mediaQuery
//------------------------------------
// $breakpoint_xg : 1920px;
$breakpoint_xg_gutter: 1800px;//세로 스크롤 영역 제외
// $breakpoint_xg_margin : 80px;

// $screen_width: 1280px;//gap: 40, content: 1200
// $screen_max_width: 1920px;// gap: 40, content: 1840

@mixin mediaQuery($swidth){
	//Under : 미만 
	@if $swidth =='md_under'{ // 0 ~ 1280
		@media (min-width: 0) and (max-width: $screen_width){
			@content;
		}
	}

	@else if $swidth =='xg_under'{
		@media (min-width: 0) and (max-width: $breakpoint_xg_gutter){
			@content;
		}
	}
}


//사용안함
@mixin headerHeight($attr:height){
	#{$attr} : $gnb_dep1_height_wide;
	@include mediaQuery('xg_under'){
		#{$attr} : $gnb_dep1_height;
	}
}

//사용안함
@mixin responsive($attr, $value1, $value2){
	#{$attr}: $value1;
	@include mediaQuery('xg_under'){
		#{$attr}: $value2;
	}
}

//사용안함
@mixin responsive_md($attr, $value1, $value2){
	@include mediaQuery('xg_under'){
		#{$attr}: $value1;
	}
	@include mediaQuery('md_under'){
		#{$attr}: $value2;
	}
}

//------------------------------------
// Grid
//------------------------------------
// flex grid
@mixin grid($_grid:2, $_gutter:1, $_hgap:0){
	$gutter: $_gutter;
	$hgap :$_hgap;
	$width1: calc(100% / $_grid);
	$width: calc( #{$width1} - #{$gutter} );

	& {display:flex; flex-wrap: wrap;gap: $hgap $gutter; 
		justify-content: space-between;
	}
	& > *{width: $width;}

	&.no_pad{gap:0;}
	&.no_pad > *{width: $width1; }
	// &.no_gap > *{margin-top: 0;}
}

@mixin grid_old($_grid:2, $_gutter:1, $_hgap:0){
	$gutter: $_gutter;
	$hgap :$_hgap;
	$width1: calc(100% / $_grid);
	$width: calc( #{$width1} - #{$gutter} );
	$mgutter: calc((100% - ( ((100% / #{$_grid}) - #{$gutter}) * #{$_grid})) / (#{$_grid} - 1));

	@if $_grid == 1 {$mgutter : 0 }

	& {display:flex; flex-wrap: wrap;}
	& > * {width: $width; margin-top: #{$hgap}; margin-right: $mgutter;}
	& > *:nth-of-type(#{$_grid}n) {margin-right: 0; }
	@for $c from 1 through $_grid{
		& > *:nth-of-type(#{$c}) {margin-top: 0;}
	}

	&.no_pad > *{width: $width1; margin-right: 0;}
	&.no_gap > *{margin-top: 0;}
}


@mixin div($_grid:2, $_gutter:2%, $_hgap:20px){
	$gutter: calc($_gutter);
	$first: calc(($_grid / $grid_column) * 100%) - calc($gutter / 2);
	$second: calc(100% - ($first + $gutter));
	$first_nopad: calc(($_grid / $grid_column) * 100%);
	$second_nopad: calc(100% - $first) - calc($gutter / 2);

	@if $_grid == 1 {$_gutter : 0 }

	& {display:flex; flex-wrap: wrap;justify-content: space-between;}
	& > *:nth-of-type(odd) {width: $first; margin-top: #{$_hgap};}
	& > *:nth-of-type(even) {width: $second; margin-top: #{$_hgap};}
	& > *:nth-of-type(1) {margin-top: 0;}
	& > *:nth-of-type(2) {margin-top: 0;}
	&.no_pad > *:nth-of-type(odd) {width: $first_nopad;}
	&.no_pad > *:nth-of-type(even) {width: $second_nopad;}
	&.no_gap > *{margin-top: 0;}
}

//usage: @include div_px(calc(30% - 4px), 4px);
@mixin div_px($_firstMW:100px, $_gutter:4px){
	// & > *:nth-of-type(1) {flex:none;min-width: $_firstMW; margin-right:$_gutter}
	// & > *:nth-of-type(2) {flex:1; margin-left:$_gutter}
	display:flex;
	& > *:first-child {flex:none;min-width: $_firstMW; margin-right:$_gutter}
	& > *:last-child {flex:1; margin-left:$_gutter}
}


//float_grid
@mixin float_grid($_grid:2, $_gutter:1, $_hgap:0){
	@include clearfix();
	$gutter: $_gutter;
	$hgap :$_hgap;
	$width1: calc(100% / $_grid);
	$width: calc( #{$width1} - #{$gutter} );
	$mgutter: calc((100% - ( ((100% / #{$_grid}) - #{$gutter}) * #{$_grid})) / (#{$_grid} - 1));

	@if $_grid == 1 {$mgutter : 0 }

	& > * {
		box-sizing: border-box;
		margin-left: 0 !important;
		margin-right: 0 !important;
		padding-left: 0 !important;
		padding-right: 0 !important;
		float:left;
		width: $width;
		margin-right: $mgutter !important;
		margin-top: #{$hgap};
	}

	@if $_grid == 2 {
		$gutter2: calc($gutter / 2);
		$width: calc( #{$width1} - #{$gutter2} );

		& > * {
			width: $width;
			float: left;
			margin-right: 0 !important;
		}

		& > *:nth-child(2n) {
			float:right;
		}
	}
	@else{
		& > *:nth-of-type(#{$_grid}n) {
			float:right;
			margin-right: 0 !important;
		}
	}

	//hgap
	@for $c from 1 through $_grid{
		& > *:nth-of-type(#{$c}) {
			margin-top: 0;
		}
	}
}


//One Page 2등분 : 마지막 item 바닥에 붙게;
@mixin grid_between($height : calc(100vh - 202px), $align : left) {
	display: flex ;flex-direction: column;min-height: $height;

	& > :last-child{
		display: flex; flex-grow:1; flex-direction: column; justify-content: flex-end; align-items:$align;
	}
}


// Accordion, Tab 요소 width Full 사용시



//------------------------------------
// Box
//------------------------------------
@mixin box($type: white, $pad: 24px, $radius:16px){
	position:relative;
	box-sizing: border-box;
	padding:$pad;
	border-radius:$radius;

	@if $type == white {
		border:1px solid #EAEBED;
		background-color:#fff;
	}
	@if $type == white_shadow {
		background-color:#fff;
		box-shadow:0px 4px 16px rgba(0, 0, 0, 0.08);
	}

	@if $type == gray {
		border-color:#F9F9FB;
		background-color: #F9F9FB;
	}

	@if $type == gray_line {
		border-color:#EFEFF1;
		background-color: #F9F9FB;
	}

	@if $type == blue {
		border-color:#F3F9FF;
		background-color:#F3F9FF;
	}

	@content;
}

//레이아웃 
@mixin layoutFull(){
	margin-left: -20px;margin-right: -20px;
	.modal.bottom &{
		margin-left: -24px;margin-right: -24px;
	}
}


@mixin hr($hr_height: 12px, $hr_hgap: 32px){
	& {
		position: relative;
		height: $hr_height;
		padding-top: $hr_height;//추가
		&:before{
			content:'';
			position: absolute;
			left: -20px; right: -20px; top: 0;
			height: $hr_height;
			background: #F9F9FB;
		}

		&.mtb{margin-top: $hr_hgap;margin-bottom: $hr_hgap; padding-top: 0;}
		&.mtb_sm{margin-top: calc($hr_hgap / 2);margin-bottom: calc($hr_hgap / 2); padding-top: 0;}
	}

	& + .comp{margin-top: 0;}
	&.section,
	&.comp{
		// margin-top: $hr_height;
		height: auto;
		&:before{
			// top: - $hr_height;
			top:0;
		}
		&.mtb{margin-top: calc($hr_hgap + $hr_hgap + $hr_height); //margin-bottom:0;
			&:before{
				top: - calc($hr_hgap + $hr_height);
			}
		}
		&:last-child{
			margin-bottom:0;
		}
	}
}

//76
//44

@mixin hr_top(){
	position: relative;padding-top: 44px; 
	&:after{content:''; position: absolute;  left: -20px; right: -20px; top:0; height: 12px; background: #F9F9FB;
	}
}

@mixin hr_bottom(){
	position: relative;padding-bottom: 44px; 
	&:after{content:''; position: absolute;  left: -20px; right: -20px; bottom:0; height: 12px; background: #F9F9FB;
	}
}

@mixin border_bottom() {
	border-bottom: 1px solid #efeff1;
}


//------------------------------------
// icon
//------------------------------------
@mixin icon_set($width, $height) {
	content: '';
	position: absolute;
	width: $width;
	height: $height;
	background-position: 50% 50%; 
	background-size: 100% 100%;
	background-repeat: no-repeat; 
}

@mixin icon_left($top, $left, $translateX) {
	top: $top;
	left: $left;
	transform: translate($translateX, -50%);
}
@mixin icon_right($top, $right, $translateX) {
	top: $top;
	right: $right;
	transform: translate($translateX, -50%);
}
@mixin icon_center() {
	left: 50%;
	transform: translateX(-50%);
}

//위험등급
@mixin risk {
	position: relative;
	flex: 1;
	width: 100%;
	height: 10px;
	margin-top: 30px;
	text-align: center;

	&.on:after {
		content: '';
		position: absolute;
		top: 50%;
		left: 50%;
		display: inline-block;
		width: 10px;
		height: 10px;
		border: 3px solid $risk1;
		border-radius: 50%;
		background: #fff;
		transform: translate(-50%, -50%);
	}
	&:before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		display: inline-block;
		width: 2px;
		height: 10px;
		background: #fff;
	}
	&:first-child {
		border-radius: 10px 0 0 10px;
		&:before {display: none;}
	}
	&:last-child {border-radius: 0 10px 10px 0;}
	span {position: absolute;top: -30px;left: 50%;transform: translateX(-50%);}
}
@mixin risk1() {
	background-color: $risk1;
	&.on {
		color: $risk1;
		&:after {border-color: $risk1;}
	}
}
@mixin risk2() {
	background-color: $risk2;
	&.on {
		color: $risk2;
		&:after {border-color: $risk2;}
	}
}
@mixin risk3() {
	background-color: $risk3;
	&.on {
		color: $risk3;
		&:after {border-color: $risk3;}
	}
}
@mixin risk4() {
	background-color: $risk4;
	&.on {
		color: $risk4;
		&:after {border-color: $risk4;}
	}
}
@mixin risk5() {
	background-color: $risk5;
	&.on {
		color: $risk5;
		&:after {border-color: $risk5;}
	}
}

// etc
@mixin font_set($color,$size,$weight) {
	color: $color;
	font-size: $size;
	font-weight: $weight;
}

@mixin beforeBul() {
	content: '';
	position: absolute;
	top: 50%;
	left: 0;
	display: inline-block;
	width: 3px;
	height: 3px;
	background: #C8C8CA;
	border-radius: 50%;
	transform: translateY(-50%);
}
@mixin afterBul() {
	content: '';
	position: absolute;
	top: 50%;
	right: 0;
	display: inline-block;
	width: 3px;
	height: 3px;
	background: #C8C8CA;
	border-radius: 50%;
	transform: translateY(-50%);
}